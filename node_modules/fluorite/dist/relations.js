'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BelongsToMany = exports.HasMany = exports.BelongsTo = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _query = require('./query');

var _unsafe = require('./util/unsafe');

var unsafe = _interopRequireWildcard(_unsafe);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BelongsTo = exports.BelongsTo = function (_SingleRowQuery) {
  (0, _inherits3.default)(BelongsTo, _SingleRowQuery);

  function BelongsTo(sourceEntity, relatedClass, foreignKey, foreignKeyTarget) {
    (0, _classCallCheck3.default)(this, BelongsTo);

    var _this = (0, _possibleConstructorReturn3.default)(this, (BelongsTo.__proto__ || (0, _getPrototypeOf2.default)(BelongsTo)).call(this, relatedClass, [function (qb) {
      return qb.where((0, _defineProperty3.default)({}, foreignKeyTarget, sourceEntity.get(foreignKey)));
    }]));

    _this.foreignKey = foreignKey;
    _this.foreignKeyTarget = foreignKeyTarget;
    return _this;
  }

  (0, _createClass3.default)(BelongsTo, [{
    key: 'query',
    value: function query(callback) {
      return new _query.SingleRowQuery(this.modelClass, [].concat((0, _toConsumableArray3.default)(this.filters), [callback]), this.relationNames);
    }
  }, {
    key: 'including',
    value: function including() {
      for (var _len = arguments.length, relationNames = Array(_len), _key = 0; _key < _len; _key++) {
        relationNames[_key] = arguments[_key];
      }

      return new _query.SingleRowQuery(this.modelClass, this.filters, [].concat((0, _toConsumableArray3.default)(this.relationNames), relationNames));
    }
  }, {
    key: 'extractRelatedData',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(rowData, relationName, models, nestedRelations) {
        var that, ids, query, relatedModels;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                that = this;
                ids = rowData.map(function (row) {
                  return row[that.foreignKey];
                });
                query = this.modelClass.objects().filter({ id__in: ids });


                if (nestedRelations) {
                  query = query.including(nestedRelations);
                }

                _context.next = 6;
                return query;

              case 6:
                relatedModels = _context.sent;


                models.map(function (model) {
                  var relatedModel = (0, _lodash.find)(relatedModels, function (m) {
                    return unsafe.eq(m.get(that.foreignKeyTarget), model.id);
                  });
                  return model.setRelatedData(relationName, relatedModel);
                });

                return _context.abrupt('return', rowData);

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function extractRelatedData(_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return extractRelatedData;
    }()
  }]);
  return BelongsTo;
}(_query.SingleRowQuery); /*
                           * Copyright (c) 2017 Roman Lakhtadyr
                           *
                           * Permission is hereby granted, free of charge, to any person obtaining a copy
                           * of this software and associated documentation files (the "Software"), to deal
                           * in the Software without restriction, including without limitation the rights
                           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                           * copies of the Software, and to permit persons to whom the Software is
                           * furnished to do so, subject to the following conditions:
                           *
                           * The above copyright notice and this permission notice shall be included in all
                           * copies or substantial portions of the Software.
                           *
                           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                           * SOFTWARE.
                           */

var HasMany = exports.HasMany = function (_MultipleRowsQuery) {
  (0, _inherits3.default)(HasMany, _MultipleRowsQuery);

  function HasMany(sourceEntity, relatedClass, foreignKey, foreignKeyTarget) {
    (0, _classCallCheck3.default)(this, HasMany);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (HasMany.__proto__ || (0, _getPrototypeOf2.default)(HasMany)).call(this, relatedClass, [function (qb) {
      return qb.where((0, _defineProperty3.default)({}, foreignKey, sourceEntity.get(foreignKeyTarget)));
    }]));

    _this2.foreignKey = foreignKey;
    return _this2;
  }

  (0, _createClass3.default)(HasMany, [{
    key: 'query',
    value: function query(callback) {
      return new _query.MultipleRowsQuery(this.modelClass, [].concat((0, _toConsumableArray3.default)(this.filters), [callback]), this.relationNames);
    }
  }, {
    key: 'including',
    value: function including() {
      for (var _len2 = arguments.length, relationNames = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        relationNames[_key2] = arguments[_key2];
      }

      return new _query.MultipleRowsQuery(this.modelClass, this.filters, [].concat((0, _toConsumableArray3.default)(this.relationNames), relationNames));
    }
  }, {
    key: 'extractRelatedData',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(rows, relationName, models, nestedRelations) {
        var that, ids, query, relatedModels;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                that = this;
                ids = rows.map(function (row) {
                  return row.id;
                });
                query = this.modelClass.objects().filter((0, _defineProperty3.default)({}, this.foreignKey + '__in', ids));


                if (nestedRelations) {
                  query = query.including(nestedRelations);
                }

                _context2.next = 6;
                return query;

              case 6:
                relatedModels = _context2.sent;


                models.map(function (model) {
                  var filteredModels = relatedModels.filter(function (m) {
                    return unsafe.eq(m.get(that.foreignKey), model.id);
                  });
                  return model.setRelatedData(relationName, filteredModels);
                });

                return _context2.abrupt('return', rows);

              case 9:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function extractRelatedData(_x5, _x6, _x7, _x8) {
        return _ref2.apply(this, arguments);
      }

      return extractRelatedData;
    }()
  }]);
  return HasMany;
}(_query.MultipleRowsQuery);

var BelongsToMany = exports.BelongsToMany = function (_MultipleRowsQuery2) {
  (0, _inherits3.default)(BelongsToMany, _MultipleRowsQuery2);

  function BelongsToMany(sourceEntity, relatedClass, pivotTableName, thisForeignKey, thatForeignKey, thisForeignKeyTarget, thatForeignKeyTarget) {
    (0, _classCallCheck3.default)(this, BelongsToMany);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (BelongsToMany.__proto__ || (0, _getPrototypeOf2.default)(BelongsToMany)).call(this, relatedClass, [function (qb) {
      return qb.innerJoin(pivotTableName, pivotTableName + '.' + thatForeignKey, relatedClass.table + '.' + thatForeignKeyTarget).select(relatedClass.table + '.*').where((0, _defineProperty3.default)({}, pivotTableName + '.' + thisForeignKey, sourceEntity.get(thisForeignKeyTarget)));
    }]));

    _this3.pivotTableName = pivotTableName;
    _this3.thisForeignKey = thisForeignKey;
    _this3.thatForeignKey = thatForeignKey;
    _this3.thatForeignKeyTarget = thatForeignKeyTarget;
    return _this3;
  }

  (0, _createClass3.default)(BelongsToMany, [{
    key: 'query',
    value: function query(callback) {
      return new _query.MultipleRowsQuery(this.modelClass, [].concat((0, _toConsumableArray3.default)(this.filters), [callback]), this.relationNames);
    }
  }, {
    key: 'including',
    value: function including() {
      for (var _len3 = arguments.length, relationNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        relationNames[_key3] = arguments[_key3];
      }

      return new _query.MultipleRowsQuery(this.modelClass, this.filters, [].concat((0, _toConsumableArray3.default)(this.relationNames), relationNames));
    }
  }, {
    key: 'extractRelatedData',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(rows, relationName, models, nestedRelations) {
        var that, ids, tempColumnName, query, relatedModels;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                that = this;
                ids = rows.map(function (row) {
                  return row.id;
                });
                tempColumnName = '__related_id';
                query = this.modelClass.objects().query(function (qb) {
                  return qb.innerJoin(that.pivotTableName, that.pivotTableName + '.' + that.thatForeignKey, that.modelClass.table + '.' + that.thatForeignKeyTarget).whereIn(that.pivotTableName + '.' + that.thisForeignKey, ids).select(that.pivotTableName + '.' + that.thisForeignKey + ' as ' + tempColumnName);
                });


                if (nestedRelations) {
                  query = query.including(nestedRelations);
                }

                _context3.next = 7;
                return query;

              case 7:
                relatedModels = _context3.sent;


                models.map(function (model) {
                  var filteredModels = relatedModels.filter(function (m) {
                    return unsafe.eq(m.get(tempColumnName), model.id);
                  });
                  return model.setRelatedData(relationName, filteredModels);
                });

                return _context3.abrupt('return', rows);

              case 10:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function extractRelatedData(_x9, _x10, _x11, _x12) {
        return _ref3.apply(this, arguments);
      }

      return extractRelatedData;
    }()
  }]);
  return BelongsToMany;
}(_query.MultipleRowsQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,