'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _query = require('./query');

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

var _relations = require('./relations');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright (c) 2017 Roman Lakhtadyr
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

exports.default = function (fluorite) {
  var _class, _temp;

  return _temp = _class = function () {
    (0, _createClass3.default)(Model, null, [{
      key: 'create',
      value: function create(attrs) {
        return new this(attrs);
      }
    }, {
      key: 'objects',
      value: function objects() {
        return new _query.MultipleRowsQuery(this);
      }
    }, {
      key: 'find',
      value: function find(id) {
        return this.objects().first((0, _defineProperty3.default)({}, this.idAttribute, id));
      }
    }, {
      key: 'fluorite',
      get: function get() {
        return fluorite;
      }
    }, {
      key: 'knex',
      get: function get() {
        return this.fluorite.knex;
      }
    }]);

    function Model(attributes) {
      var previousAttributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      (0, _classCallCheck3.default)(this, Model);

      this.attributes = attributes;
      this.previousAttributes = previousAttributes;
      this.relatedModels = {};
    }

    (0, _createClass3.default)(Model, [{
      key: 'createKnexQuery',
      value: function createKnexQuery() {
        var knex = this.constructor.knex;
        var transaction = this.constructor.fluorite.transaction;

        if (transaction.isTransacting()) {
          return knex.transacting(transaction.currentTransaction()).from(this.constructor.table);
        }

        return this.constructor.knex.from(this.constructor.table);
      }
    }, {
      key: 'get',
      value: function get(name) {
        return this.attributes[name];
      }
    }, {
      key: 'related',
      value: function related(name) {
        return this.relatedModels[name];
      }
    }, {
      key: 'set',
      value: function set(name, value) {
        if (name instanceof Object) {
          this.attributes = (0, _extends3.default)({}, this.attributes, name);
          return;
        }
        this.attributes[name] = value;
      }
    }, {
      key: 'hasMany',
      value: function hasMany(relatedClass) {
        var foreignKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.name.toLowerCase() + '_id';
        var foreignKeyTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.idAttribute;

        return new _relations.HasMany(this, relatedClass, foreignKey, foreignKeyTarget);
      }
    }, {
      key: 'belongsTo',
      value: function belongsTo(relatedClass) {
        var foreignKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : relatedClass.name.toLowerCase() + '_id';
        var foreignKeyTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : relatedClass.idAttribute;

        return new _relations.BelongsTo(this, relatedClass, foreignKey, foreignKeyTarget);
      }
    }, {
      key: 'belongsToMany',
      value: function belongsToMany(relatedClass) {
        var pivotTableName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _lodash.sortBy)([this.constructor.table, relatedClass.table]).join('_');
        var thisForeignKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.name.toLowerCase() + '_id';
        var thatForeignKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : relatedClass.name.toLowerCase() + '_id';
        var thisForeignKeyTarget = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.constructor.idAttribute;
        var thatForeignKeyTarget = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : relatedClass.idAttribute;

        return new _relations.BelongsToMany(this, relatedClass, pivotTableName, thisForeignKey, thatForeignKey, thisForeignKeyTarget, thatForeignKeyTarget);
      }
    }, {
      key: 'toJSON',
      value: function toJSON() {
        return (0, _extends3.default)({}, (0, _lodash.pickBy)(this.attributes, function (val, key) {
          return !(0, _lodash.startsWith)(key, '__');
        }), (0, _lodash.mapValues)(this.relatedModels, function (modelOrModels) {
          return Array.isArray(modelOrModels) ? modelOrModels.map(function (m) {
            return m.toJSON();
          }) : modelOrModels.toJSON();
        }));
      }
    }, {
      key: 'setRelatedData',
      value: function setRelatedData(name, data) {
        this.relatedModels[name] = data;
      }

      /*
       * Methods that executes SQL statements
       */

    }, {
      key: 'save',
      value: function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(name, value) {
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if ((0, _lodash.isEmpty)(name)) {
                    _context.next = 3;
                    break;
                  }

                  this.set(name, value);
                  return _context.abrupt('return', this.update());

                case 3:
                  if (!this.isNew) {
                    _context.next = 5;
                    break;
                  }

                  return _context.abrupt('return', this.insert());

                case 5:
                  return _context.abrupt('return', this.update());

                case 6:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function save(_x11, _x12) {
          return _ref.apply(this, arguments);
        }

        return save;
      }()
    }, {
      key: 'refresh',
      value: function () {
        var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
          var attributes;
          return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.createKnexQuery().from(this.constructor.table).where(this.constructor.idAttribute, this.id).first();

                case 2:
                  attributes = _context2.sent;


                  this.attributes = attributes;
                  this.previousAttributes = (0, _assign2.default)({}, attributes);

                case 5:
                case 'end':
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function refresh() {
          return _ref2.apply(this, arguments);
        }

        return refresh;
      }()
    }, {
      key: 'remove',
      value: function () {
        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
          return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!this.isNew) {
                    _context3.next = 2;
                    break;
                  }

                  throw new this.constructor.NotFoundError('Can\'t remove new entity');

                case 2:
                  _context3.next = 4;
                  return this.createKnexQuery().where(this.constructor.idAttribute, this.id).delete();

                case 4:
                case 'end':
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function remove() {
          return _ref3.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: 'insert',
      value: function () {
        var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
          var ids, lastId;
          return _regenerator2.default.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.createKnexQuery().insert(this.attributesWithoutId, this.constructor.idAttribute);

                case 2:
                  ids = _context4.sent;
                  lastId = (0, _lodash.last)(ids);

                  this.attributes[this.constructor.idAttribute] = lastId;
                  this.previousAttributes = this.attributes;
                  return _context4.abrupt('return', lastId);

                case 7:
                case 'end':
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function insert() {
          return _ref4.apply(this, arguments);
        }

        return insert;
      }()
    }, {
      key: 'update',
      value: function () {
        var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
          var updatedAttributes;
          return _regenerator2.default.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  updatedAttributes = this.updatedAttributes;

                  if (!(0, _lodash.isEmpty)(updatedAttributes)) {
                    _context5.next = 3;
                    break;
                  }

                  return _context5.abrupt('return');

                case 3:
                  _context5.next = 5;
                  return this.createKnexQuery().update(updatedAttributes).where((0, _defineProperty3.default)({}, this.constructor.idAttribute, this.id));

                case 5:
                  this.previousAttributes = this.attributes;

                case 6:
                case 'end':
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function update() {
          return _ref5.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: 'load',
      value: function () {
        var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(relation) {
          var data;
          return _regenerator2.default.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this[relation]();

                case 2:
                  data = _context6.sent;

                  this.setRelatedData(relation, data);

                case 4:
                case 'end':
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function load(_x13) {
          return _ref6.apply(this, arguments);
        }

        return load;
      }()
    }, {
      key: 'id',
      get: function get() {
        return this.attributes[this.constructor.idAttribute];
      }
    }, {
      key: 'attributesWithoutId',
      get: function get() {
        var _this = this;

        return (0, _lodash.pickBy)(this.attributes, function (value, key) {
          return key !== _this.constructor.idAttribute;
        });
      }
    }, {
      key: 'updatedAttributes',
      get: function get() {
        var _this2 = this;

        return (0, _lodash.pickBy)(this.attributesWithoutId, function (value, key) {
          return value !== _this2.previousAttributes[key];
        });
      }
    }, {
      key: 'isNew',
      get: function get() {
        return (0, _lodash.isNil)(this.id);
      }
    }]);
    return Model;
  }(), _class.NotFoundError = function (_errors$NotFoundError) {
    (0, _inherits3.default)(NotFoundError, _errors$NotFoundError);

    function NotFoundError() {
      (0, _classCallCheck3.default)(this, NotFoundError);
      return (0, _possibleConstructorReturn3.default)(this, (NotFoundError.__proto__ || (0, _getPrototypeOf2.default)(NotFoundError)).apply(this, arguments));
    }

    return NotFoundError;
  }(_errors2.default.NotFoundError), _class.IntegrityError = function (_errors$IntegrityErro) {
    (0, _inherits3.default)(IntegrityError, _errors$IntegrityErro);

    function IntegrityError() {
      (0, _classCallCheck3.default)(this, IntegrityError);
      return (0, _possibleConstructorReturn3.default)(this, (IntegrityError.__proto__ || (0, _getPrototypeOf2.default)(IntegrityError)).apply(this, arguments));
    }

    return IntegrityError;
  }(_errors2.default.IntegrityError), _class.table = null, _class.idAttribute = 'id', _class.scopes = {}, _temp;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,